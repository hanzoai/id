name: Hanzo ID Tests

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:

jobs:
  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: casdoor
          POSTGRES_PASSWORD: casdoor123
          POSTGRES_DB: casdoor
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: casdoor
          MYSQL_ROOT_PASSWORD: casdoor123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache-dependency-path: ./go.mod
        
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
        
    - name: Run Go vet
      run: go vet ./...
      
    - name: Run Go tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic $(go list ./...) -tags skipCi
      env:
        TEST_MYSQL_HOST: localhost
        TEST_MYSQL_PORT: 3306
        TEST_MYSQL_USER: root
        TEST_MYSQL_PASSWORD: casdoor123
        TEST_MYSQL_DBNAME: casdoor
        TEST_POSTGRES_HOST: localhost
        TEST_POSTGRES_PORT: 5432
        TEST_POSTGRES_USER: casdoor
        TEST_POSTGRES_PASSWORD: casdoor123
        TEST_POSTGRES_DBNAME: casdoor
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: ./web/yarn.lock
        
    - name: Install dependencies
      working-directory: ./web
      run: yarn install --frozen-lockfile
      
    - name: Lint
      working-directory: ./web
      run: yarn lint || true
      
    - name: Type check
      working-directory: ./web
      run: yarn type-check || true
      
    - name: Run tests
      working-directory: ./web
      run: yarn test --passWithNoTests || true
      
    - name: Build
      working-directory: ./web
      run: |
        export NODE_OPTIONS="--max-old-space-size=4096"
        CI=false yarn build
      
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: casdoor
          POSTGRES_PASSWORD: casdoor123
          POSTGRES_DB: casdoor
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Build Hanzo ID server
      run: |
        go build -o casdoor .
        
    - name: Start Hanzo ID server
      run: |
        ./casdoor &
        sleep 10
      env:
        driverName: postgres
        dataSourceName: "user=casdoor password=casdoor123 host=localhost port=5432 sslmode=disable dbname=casdoor"
        
    - name: Test Hanzo ID endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/api/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/api/get-global-providers || exit 1
        
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t hanzo-id-test .
        
    - name: Test container startup
      run: |
        docker run -d \
          --name hanzo-id-test \
          -p 8000:8000 \
          -e driverName=sqlite3 \
          -e dataSourceName=file::memory:?cache=shared \
          hanzo-id-test
          
        sleep 10
        docker logs hanzo-id-test
        
        # Test if Hanzo ID is accessible
        curl -f http://localhost:8000/api/health || exit 1
        
        docker stop hanzo-id-test
        docker rm hanzo-id-test
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'